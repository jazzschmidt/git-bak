#!/bin/bash -e

# Register cleanup
trap cleanup EXIT SIGINT SIGTERM

CLONE_DIR=
function cleanup() {
  # Remove the temporary clone dir
  if [ -n "$CLONE_DIR" ]; then
    log "Removing temprorary clone directory"
    rm -rf $CLONE_DIR
  fi
}

declare -r SCRIPT_NAME=$(basename $0)
declare -r WORKING_DIR=$(pwd)

# Stream to print logs to.
# Will be set to stdout with verbose mode enabled
LOG="/dev/null"







####################################
##          Main program          ##
####################################

##
# Main entry point
##
function main() {
  local argv=$*
  local url; local repo_name
  local tmp_dir
  local clone_script
  local tgz_file; local archive_files

  # Catch unknown arguments
  local unknown_arg=$(get_unmatched_arg "$argv" \
    -u --url \
    -f --file \
    -h --help \
    -v --verbose \
    -x --no-script
  )
  if [ -n "$unknown_arg" ]; then
    err "Unknown argument: $unknown_arg";
  fi

  # Print help
  if has_arg "$argv" -h --help; then
    print_usage; exit
  fi

  # Increase verbosity
  if has_arg "$argv" -v --verbose; then
    LOG=1; log "Increasing verbosity"
  fi

  # Disable clone script
  if has_arg "$argv" -x --no-script; then
    clone_script=false
  else
    clone_script=true
  fi

  # Backup arguments
  url=$(get_arg_req "$argv" -u --url) || err "Repository url must be specified."
  tgz_file=$(get_arg_opt "$argv" -f --file)

  # Set repo name
  log "Determining repository name from $url"
  repo_name=$(get_url_repository_name "$url")
  log "Repository name: $repo_name"

  # Set file name if not specified
  if [ -z "$tgz_file" ]; then
    tgz_file=$WORKING_DIR/${repo_name}.tar.gz
  fi

  log "Archive will be written to: $tgz_file"

  # Create clone directory
  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/${SCRIPT_NAME}.XXX")
  log "Cloning into: $tmp_dir"
  # Must be set to be cleaned afterwards
  CLONE_DIR="$tmp_dir"

  # Create the backup
  create_backup $url $tmp_dir

  # Add convenience checkout script to the directory
  archive_files="gitbundle"
  if $clone_script; then
    create_clone_script "$repo_name" "$tmp_dir/checkout"
    archive_files+=" checkout"
  fi

  # Create archive
  tar -czf $tgz_file -C $tmp_dir $archive_files
}







####################################
##          Program logic         ##
####################################

##
# Creates the git bundle from the git repo $1 into dir $2
##
function create_backup() {
  local url=$1; local dir=$2;
  # Clone the repo
  git clone --mirror "$url" "$dir" 1>&$LOG
  # Create git bundle
  (cd "$dir" && git bundle create "gitbundle" --all) 1>&$LOG
}

##
# Tries to determine the humanish repository name
##
function get_url_repository_name() {
  local url=$1

  # Remove trailing / from url
  if [[ "$url" = */ ]]; then url=${url##*/}; fi
  # Extract last path
  url=${url##*/}
  # Remove git prefix
  echo "${url%*.git}"
}

##
# Creates the convenience clone script $2 for repository $1
##
function create_clone_script() {
  local repo_name=$1; local file=$2

  log "Creating clone script for $repo_name"
  touch "$file" && chmod +x "$file"

  cat > "$file" <<EOF
#!/bin/bash -e

DIR=\$(dirname \$0)

# Clone into current dir or use script parameters
LOCAL_REPO=\${*:-${repo_name}}

(
  cd \$DIR
  git clone gitbundle \$LOCAL_REPO
)

EOF
}





####################################
##        Argument parsing        ##
####################################

##
# Extracts the argument $2 from the string $1 and prints its value to stdout.
# Will return exit code 1 when argument is not present.
##
function get_arg() {
  local args=$1
  local key1=$2; local key2=$3;
  local arg
  local found_key=false

  for arg in $args; do
    if [ "$found_key" = true ]; then val=$arg; break; fi
    if [[ "$arg " = "$key1 " ]] || [[ "$arg " = "$key2 " ]]; then found_key=true; fi
    if [[ "$arg" = "$key1="* ]] || [[ "$arg" = "$key2="* ]]; then found_key=true; val="${arg#*=}"; break; fi
  done

  echo "$val"
  return $($found_key)
}

##
# Extracts a required argument $2 from the string $1 and prints its value to stdout.
# Will return exit code 1 when the value is an empty string.
##
function get_arg_req() {
  local arg=$(get_arg "$1" ${*:2})
  test -n "$arg" && echo "$arg"
}

##
# Extracts an optional argument $2 from the string $1 and prints its value to stdout.
##
function get_arg_opt() {
  get_arg "$1" ${*:2} || echo ""
}

##
# Will return exit code 1 when argument $2 is not present in string $1.
# Can be used for flag arguments for example.
##
function has_arg() {
  get_arg "$1" ${*:2} >/dev/null
}

##
# Will return the first argument from string $1 that is not specified as $1+n.
##
function get_unmatched_arg() {
  local args=$1; local arg; local valid=${*:2}
  for arg in $args; do
    if [[ "$arg" = -* ]] && [[ ! " ${valid[*]} " = *" $arg "* ]]; then
      echo "$arg"; break
    fi
  done
}





####################################
##        Output functions        ##
####################################

##
# Print $1 in bold
##
function b() {
  tput bold; printf "$1"; tput sgr0;
}


##
# Print $1 underlined
##
function u() {
  tput smul; printf "$1"; tput sgr0;
}

##
# Print to stderr and exit
##
function err() {
  >&2 printf "[ERROR] $1\n"
  >&2 printf "Try '$SCRIPT_NAME --help' for more information\n"
  exit 1
}

##
# Print log message when verbose mode is enabled
##
function log() {
  >&$LOG printf "[INFO] $1\n"
}

##
# Shows usage info
##
function print_usage() {
  cat << EOF
$(b NAME)
    $SCRIPT_NAME - Backup a Git repository

$(b SYNOPSIS)
    $SCRIPT_NAME [-x] [-f $(u archive)] -u $(u url)

$(b DESCRIPTION)
    Backups a Git repository by bundling it with all its references. The bundle is then packed as tar ball.
    The archive will be placed in the current directory by default.

    Unless otherwise specified via '-x' or '--no-script', a simple script to conveniently clone the bundle into
    the current directory is added to the archive.

$(b OPTIONS:)
    -f, --file <FILE>   Custom path for the generated tar ball
    -u, --url <URL>     Tells which url to clone the Git repository from
    -h, --help          Shows this help message
    -v, --verbose       Increases verbosity
    -x, --no-script     Skips creation of the clone script

$(b EXAMPLES:)
    Backup a remote repository that is saved as 'repo.tar.gz' in the current directory along with the clone script.

        $SCRIPT_NAME -u https://example.com/projects/repo.git

EOF
}


# Starts the program
main "$@"
